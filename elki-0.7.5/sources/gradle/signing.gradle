def unusedSignPom(pom) { pom.withXml {
  // Store pom for signing
  def pomFile = file("${project.buildDir}/generated-pom.xml")
  writeTo(pomFile)
  def pomAscFile = signing.sign(pomFile).signatureFiles[0]
  artifact(pomAscFile) {
    classifier = null
    extension = 'pom.asc'
  }
} }

subprojects { // We only publish subprojects
if (needsSigning && publishing.publications) {
  apply plugin: 'signing'
  task signPom(type: Sign) {
    sign project.file("${project.buildDir}/publications/maven/pom-default.xml")
    outputs.upToDateWhen { false }
    // onlyIf { needsSigning }
  }
  signing {
    useGpgCmd()
    required { needsSigning && gradle.taskGraph.hasTask("uploadArchives") }
    // sign configurations.archives
    sign publishing.publications.maven
  }
  model {
    // tasks.publishMavenPublicationToMavenLocal { dependsOn project.tasks.withType(Sign) }
    if (project.hasProperty("sonatypeUsername")) {
      tasks.publishMavenPublicationToMavenRepository { dependsOn project.tasks.withType(Sign) }
    }
    tasks.signPom { dependsOn tasks.generatePomFileForMavenPublication }
  }
} }
